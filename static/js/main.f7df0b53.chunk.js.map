{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["Model","gltf","useLoader","GLTFLoader","scene","traverse","node","isMesh","castShadow","scale","object","position","receiveShadow","rotation","Math","PI","attach","opacity","Lights","intensity","color","App","useState","placementMode","setPlacementMode","shadows","environmentMap","poseMode","placementCameraOffset","fallback","Html","style","fontWeight","id","role","onKeyPress","currentPlacementMode","tabIndex","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uNAWA,SAASA,IACL,IAAMC,EAAOC,oBAAUC,IAAY,4BAMnC,OALAF,EAAKG,MAAMC,UAAS,SAACC,GACbA,EAAKC,SACLD,EAAKE,YAAa,MAItB,kCACI,2BACIA,YAAU,EACVC,MAAM,MACNC,OAAQT,EAAKG,MACbO,SAAS,MAEb,uBAAMC,eAAa,EAACC,SAAU,EAAEC,KAAKC,GAAK,EAAG,EAAG,GAAhD,UACI,qCAAqBC,OAAO,aAC5B,gCAAgBA,OAAO,WAAWC,QAAS,WAM3D,SAASC,IACL,OACI,kCACI,8BAAcC,UAAW,GAAKC,MAAM,UACpC,kCACIZ,YAAU,EACVG,SAAU,CAAC,EAAG,GAAI,GAClBQ,UAAW,GACX,cAAa,KACb,sBAAqB,EACrB,sBAAqB,EACrB,oBAAmB,EACnB,wBAAuB,EACvB,qBAAoB,GACpB,oBAAmB,GACnB,uBAAsB,EACtB,uBAAsB,KACtB,wBAAuB,UAwDxBE,MAlDf,WACI,MAA0CC,oBAAS,GAAnD,mBAAOC,EAAP,KAAsBC,EAAtB,KAEA,OACI,qCACI,cAAC,uBAAD,IACA,eAAC,eAAD,CAAcC,SAAO,EAArB,UACI,cAAC,eAAD,CAAcC,gBAAc,EAACC,SAAS,kBACtC,eAAC,iBAAD,CACIJ,cAAeA,EACfK,sBAAuB,CAAC,EAAG,GAAI,GAFnC,UAGI,cAAC,WAAD,CACIC,SACI,cAACC,EAAA,EAAD,UACI,qBACIC,MAAO,CACHX,MAAO,QACPY,WAAY,QAHpB,gCAHZ,SAYI,cAAChC,EAAD,MAEJ,cAACkB,EAAD,UAGR,sBACIe,GAAG,gBACHC,KAAK,SACLC,WAAY,WACRX,GACI,SAACY,GAAD,OAA2BA,MAGnCC,SAAU,EACVC,QAAS,WACLd,GACI,SAACY,GAAD,OAA2BA,MAXvC,wBAeKb,EAAgB,UAAY,YAfjC,oBCvEGgB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.f7df0b53.chunk.js","sourcesContent":["import React, { Suspense, useState } from 'react';\nimport {\n    ZapparCamera,\n    InstantTracker,\n    ZapparCanvas,\n    BrowserCompatibility,\n} from '@zappar/zappar-react-three-fiber';\nimport { useLoader } from '@react-three/fiber';\nimport { GLTFLoader } from 'three-stdlib/loaders/GLTFLoader';\nimport { Html } from '@react-three/drei';\n\nfunction Model() {\n    const gltf = useLoader(GLTFLoader, './assets/whale_test3.glb');\n    gltf.scene.traverse((node: any) => {\n        if (node.isMesh) {\n            node.castShadow = true;\n        }\n    });\n    return (\n        <group>\n            <primitive\n                castShadow\n                scale='1.2'\n                object={gltf.scene}\n                position='0'\n            />\n            <mesh receiveShadow rotation={[-Math.PI / 2, 0, 0]}>\n                <planeBufferGeometry attach='geometry' />\n                <shadowMaterial attach='material' opacity={0.2} />\n            </mesh>\n        </group>\n    );\n}\n\nfunction Lights() {\n    return (\n        <group>\n            <ambientLight intensity={0.6} color='white' />\n            <directionalLight\n                castShadow\n                position={[0, 30, 0]}\n                intensity={0.8}\n                shadow-bias={0.0001}\n                shadow-camera-right={4}\n                shadow-camera-left={-4}\n                shadow-camera-top={4}\n                shadow-camera-bottom={-4}\n                shadow-camera-near={0.1}\n                shadow-camera-far={50}\n                shadow-camera-radius={2}\n                shadow-mapSize-width={1024}\n                shadow-mapSize-height={1024}\n            />\n        </group>\n    );\n}\n\nfunction App() {\n    const [placementMode, setPlacementMode] = useState(true);\n\n    return (\n        <>\n            <BrowserCompatibility />\n            <ZapparCanvas shadows>\n                <ZapparCamera environmentMap poseMode='anchor-origin' />\n                <InstantTracker\n                    placementMode={placementMode}\n                    placementCameraOffset={[0, 0, -2]}>\n                    <Suspense\n                        fallback={\n                            <Html>\n                                <div\n                                    style={{\n                                        color: 'white',\n                                        fontWeight: 'bold',\n                                    }}>\n                                    Model Loading...\n                                </div>\n                            </Html>\n                        }>\n                        <Model />\n                    </Suspense>\n                    <Lights />\n                </InstantTracker>\n            </ZapparCanvas>\n            <div\n                id='zappar-button'\n                role='button'\n                onKeyPress={() => {\n                    setPlacementMode(\n                        (currentPlacementMode) => !currentPlacementMode\n                    );\n                }}\n                tabIndex={0}\n                onClick={() => {\n                    setPlacementMode(\n                        (currentPlacementMode) => !currentPlacementMode\n                    );\n                }}>\n                Tap here to\n                {placementMode ? ' place ' : ' pick up '}\n                the object\n            </div>\n        </>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}